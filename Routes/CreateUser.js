const express = require('express');
const router = express.Router();
const user = require('../model/User');
const { body,validationResult } = require('express-validator');
const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");
const jwtSecure = "Mynameiskpandyoutube!!!##"; // secure key 

router.post("/createuser", body('email').isEmail(),body('password').isLength({ min: 5}),body('name').isLength({ min: 5}) ,async(req,res)=>{
    
    const salt = await bcrypt.genSalt(10); // random key generated by bcrypt
    const secPassword = await bcrypt.hash(req.body.password,salt); // encrypting password with bcrypt
    try{
        const error = validationResult(req);
        if(!error.isEmpty()){
            return res.status(400).json({ error: error.array() });
        }
        await user.create({
            name: req.body.name,
            password: secPassword,
            email: req.body.email,
            location: req.body.location    
        })
        res.json({success:true});
    }catch(error){
        console.log(error)
        res.json({success:false});
    }
})

router.post("/loginuser",body('email').isEmail(),body('password').isLength({ min: 5}),async(req,res)=>{
    const error = validationResult(req);
        if(!error.isEmpty()){
            return res.status(400).json({ error: error.array() });
        }

    let email = req.body.email;
    let password = req.body.password;
    try{
        let userData = await user.findOne({email});
        if(!userData)
        {
            return res.status(400).json({ error: "enter valid email!!" });
        }
        const pwdCompare = await bcrypt.compare(password,userData.password); // compairing entered password with the stored encrypted password using bcrypt compare algorithms.
        if(!pwdCompare)
        {
            return res.status(400).json({ error: "enter valid password!!" });
        }

        const Data = {
            user:{
                id: userData.id
            }
        }
        const authToken = jwt.sign(Data,jwtSecure); // Generating authToken using the user id and jwtSecure key user doesn't know about secure key.
        res.json({success:true,authToken:authToken});
    }catch(error){
        console.log(error)
        res.json({success:false});
    }
})

module.exports = router;